{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","handleDateChange","e","preventDefault","setState","date","target","value","handleAUMChange","name","handleNAVChange","submitHandler","newObj","state","outdated","axios","post","JSON","stringify","then","res","console","log","catch","err","fetchData","a","currentDate","fetch","result","json","data","allArray","Object","entries","newAllArray","map","item","series","aum","filter","every","piece","Date","latest_nav","getTime","length","fund","keys","en","this","onSubmit","type","id","onChange","placeholder","required","index","n","key","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b465c2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      outdated:[],\n      date:\"\",\n    }\n  }\n  \n  handleDateChange=(e)=>{\n    e.preventDefault()\n    this.setState({date: e.target.value})\n\n  }\n\n  handleAUMChange=(e)=>{\n    e.preventDefault()\n    this.setState({\n      [e.target.name]:e.target.value\n    })\n\n  }\n  handleNAVChange=(e)=>{\n  e.preventDefault()\n    this.setState({\n      [e.target.name]:e.target.value\n    })\n  }\n\n  submitHandler=(e)=>{\n    e.preventDefault()\n    let newObj = {...this.state}\n    delete newObj.outdated;\n    // newObj = { date: \"2020-11-27\", IGB: \"30\", IGB_A: \"20\", IGB_B: \"10\", MJJ: \"60\", MJJ_A: \"30\", MJJ_F: \"20\" }\n    axios.post(`http://localhost/server/demo.php`, JSON.stringify(newObj))\n    .then(res=>console.log(res))\n    .catch(err=>{\n      console.log(err)\n    })\n\n  }\n\n\n\n\n// fetch data from json file\n  componentDidMount(){\n    this.fetchData()\n  \n  }\n\n\n  fetchData = async() =>{\n    let currentDate = \"2020-11-26\"\n  try{\n\n     const result = await fetch(`https://purposecloud.s3.amazonaws.com/challenge-data.json`)\n      const data = await result.json()\n      // refactoring data\n      const allArray = Object.entries(data)\n  \n      const newAllArray = allArray.map(item =>{\n        \n        return [item[0], item[1].name, item[1].series,  item[1].aum]\n      })\n\n      let outdated = newAllArray.filter(item =>{\n        return Object.entries(item[2]).every(piece=> {return new Date(piece[1].latest_nav.date).getTime() < new Date(currentDate).getTime() ? piece : null})\n\n      } ).filter(item => item.length > 0)\n\n      outdated = outdated.map(fund => {\n       return [fund[0], Object.keys(fund[2]),fund[1].en ]\n      })\n\n      this.setState({outdated})\n      \n   \n\n  }catch(err){\n    console.log(err)\n  }\n\n\n  }\n\n  // fetch data ends\n\n  render() {\n    const {outdated} = this.state\n    return (\n      \n      <form onSubmit={this.submitHandler}>\n        \n        <input type=\"text\" id=\"date\" name=\"date\" onChange={this.handleDateChange} value={this.state.date} placeholder=\"type new date\" required/>\n        <button type=\"submit\">submit</button>\n        {\n          outdated.map((item,index) =>{\n            return <div>\n                  <p>{`${item[2]}-${item[0]}`}</p>\n                  <input type=\"text\" name={item[0]} onChange={this.handleAUMChange}  value={this.state.index} placeholder=\"type new aum\" required/>\n                  \n                   <ul>\n                    \n                    {item[1].map((n,key) => {\n                    return <div>\n                       <li key={key}>{n}</li>\n                       <input type=\"text\" value={this.state.key} onChange={this.handleNAVChange} name={`${item[0]}_${n}`} placeholder=\"type new nav\" required />\n                    </div>})}                   \n                    </ul>                  \n              </div>\n          })\n        }\n\n\n      </form>\n    )\n  }\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}