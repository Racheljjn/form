[{"C:\\Users\\jjnch\\Desktop\\projects\\react-tech\\react-tech\\src\\index.js":"1","C:\\Users\\jjnch\\Desktop\\projects\\react-tech\\react-tech\\src\\reportWebVitals.js":"2","C:\\Users\\jjnch\\Desktop\\projects\\react-tech\\react-tech\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":10091,"mtime":1608183352312,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"7b2v7e",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"C:\\Users\\jjnch\\Desktop\\projects\\react-tech\\react-tech\\src\\index.js",[],["17","18"],"C:\\Users\\jjnch\\Desktop\\projects\\react-tech\\react-tech\\src\\reportWebVitals.js",[],["19","20"],"C:\\Users\\jjnch\\Desktop\\projects\\react-tech\\react-tech\\src\\App.js",["21","22","23","24","25"],"import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport NumberFormat from \"react-number-format\";\n\nlet current_date = \"2020-11-26\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected_fund_ID: \"IGB\",\n      outdated_fund_data: {},\n      updated_fund_data: {},\n      date: \"\",\n    };\n  }\n\n  handleFundSelection = (e) => {\n    e.preventDefault();\n    this.setState({ selected_fund_ID: e.target.value });\n  };\n\n  handleDateChange = (e) => {\n    e.preventDefault();\n    const updated_fund_data = { ...this.state.updated_fund_data };\n    Object.keys(updated_fund_data).map((key) => {\n      return (updated_fund_data[key].date = e.target.value);\n    });\n    this.setState({ date: e.target.value, updated_fund_data });\n  };\n\n  handleAUMChange = (e, name, fundID) => {\n    e.preventDefault();\n    const updated_fund_data = { ...this.state.updated_fund_data };\n    updated_fund_data[fundID].aum = Number(\n      e.target.value.replace(/[^0-9\\.]+/g, \"\")\n    );\n\n    this.setState({\n      [name]: e.target.value,\n      updated_fund_data,\n    });\n  };\n\n  handleNAVChange = (e, seriesID, selected_fund_ID) => {\n    e.preventDefault();\n    const updated_fund_data = { ...this.state.updated_fund_data };\n    updated_fund_data[selected_fund_ID].series[seriesID] = Number(\n      e.target.value.replace(/[^0-9\\.]+/g, \"\")\n    );\n    this.setState({\n      [e.target.name]: e.target.value,\n      updated_fund_data,\n    });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    let newObj = {};\n    for (let fund_item in this.state.updated_fund_data) {\n      if (\n        this.state.updated_fund_data[fund_item].hasOwnProperty(\"aum\") ||\n        Object.keys(this.state.updated_fund_data[fund_item].series).length != 0\n      ) {\n        newObj[fund_item] = this.state.updated_fund_data[fund_item];\n      }\n    }\n    if (Object.keys(newObj).length === 0) {\n      alert(\"Can not submit empty form\");\n    } else {\n      console.log(newObj);\n      axios\n        .post(`http://localhost/server/demo.php`, JSON.stringify(newObj))\n        .then((res) => {\n          if (res.status === 200) {\n            alert(\"form submitted!\");\n          }\n        })\n        .catch((err) => {\n          if (err) {\n            alert(\"Oops, something went wrong! Maybe check your server...\");\n          }\n        });\n    }\n  };\n\n  /***************************\n   fetch data and organize data\n   ****************************/\n  componentDidMount() {\n    this.fetchData();\n  }\n  fetchData = async () => {\n    try {\n      const result = await fetch(\n        `https://purposecloud.s3.amazonaws.com/challenge-data.json`\n      );\n      const data = await result.json();\n\n      const simplified_fund_data = {};\n\n      for (let prop in data) {\n        if (data.hasOwnProperty(prop)) {\n          simplified_fund_data[prop] = {\n            aum: data[prop].aum,\n            name: data[prop].name.en,\n            series: data[prop].series,\n            date: \"\",\n          };\n          for (let key in data[prop].series) {\n            if (data[prop].series.hasOwnProperty(key)) {\n              simplified_fund_data[prop].date =\n                data[prop].series[key].latest_nav.date;\n              simplified_fund_data[prop].series[key] =\n                data[prop].series[key].latest_nav.value;\n            }\n          }\n        }\n      }\n\n      /**********************************\n      filter out funds which are outdated\n      ************************************/\n      for (let id in simplified_fund_data) {\n        if (simplified_fund_data.hasOwnProperty(id)) {\n          if (\n            new Date(simplified_fund_data[id].date).getTime() >\n            new Date(current_date).getTime()\n          ) {\n            delete simplified_fund_data[id];\n          }\n        }\n      }\n\n      let updated_fund_data = JSON.parse(JSON.stringify(simplified_fund_data));\n      Object.keys(updated_fund_data).map((key) => {\n        return (updated_fund_data[key] = {\n          series: {},\n          name: simplified_fund_data[key].name,\n        });\n      });\n\n      this.setState({\n        updated_fund_data,\n        outdated_fund_data: simplified_fund_data,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  render() {\n    const { outdated_fund_data, selected_fund_ID } = this.state;\n\n    return (\n      <div>\n        <h1 className=\"title\">\n          out-of-date fund{\" \"}\n          <span className=\"instructions\">\n            (please note*: red numbers are stale numbers)\n          </span>\n        </h1>\n        <form id=\"updated_form\" onSubmit={this.submitHandler}>\n          <main className=\"date_fund_AUM\">\n            <section className=\"date_picker\">\n              <label htmlFor=\"date\" aria-label=\"date\">\n                <span className=\"date_label\">Date:</span>{\" \"}\n              </label>\n              <input\n                type=\"date\"\n                min={current_date}\n                id=\"date\"\n                name=\"date\"\n                onChange={this.handleDateChange}\n                value={this.state.date}\n              />\n              <p className=\"outdated_date\">\n                {outdated_fund_data[selected_fund_ID]\n                  ? outdated_fund_data[selected_fund_ID].date\n                  : null}\n              </p>\n              <p className=\"current_fund\">\n                Current Fund: {this.state.selected_fund_ID}\n              </p>\n            </section>\n            <section className=\"fund_AUM\">\n              <div className=\"fund\">\n                <label htmlFor=\"selection\">Choose a fund:</label>\n                <select\n                  id=\"selection\"\n                  value={selected_fund_ID}\n                  onChange={this.handleFundSelection}\n                >\n                  {Object.keys(outdated_fund_data).map((key, index) => {\n                    return (\n                      <option className=\"option\" key={index} value={key}>\n                        {outdated_fund_data[key].name}({key})\n                      </option>\n                    );\n                  })}\n                </select>\n              </div>\n\n              <div className=\"AUM_data\">\n                {outdated_fund_data[selected_fund_ID]\n                  ? Object.keys(outdated_fund_data).map((fundID) => {\n                      if (fundID === selected_fund_ID) {\n                        return (\n                          <div className=\"AUM_label\">\n                            <label htmlFor=\"AUM\">AUM: </label>\n\n                            <NumberFormat\n                              id=\"AUM\"\n                              thousandSeparator={true}\n                              prefix={\"$\"}\n                              displayType=\"number\"\n                              name={outdated_fund_data[selected_fund_ID].name}\n                              value={\n                                this.state[\n                                  outdated_fund_data[selected_fund_ID].name\n                                ]\n                              }\n                              onChange={(e) => {\n                                this.handleAUMChange(\n                                  e,\n                                  outdated_fund_data[selected_fund_ID].name,\n                                  fundID\n                                );\n                              }}\n                            />\n                            <p className=\"outdated_AUM\">\n                              {outdated_fund_data[fundID]\n                                ? outdated_fund_data[fundID].aum.toLocaleString(\n                                    \"en-US\",\n                                    {\n                                      style: \"currency\",\n                                      currency: \"USD\",\n                                    }\n                                  )\n                                : null}\n                            </p>\n                          </div>\n                        );\n                      }\n                    })\n                  : null}\n              </div>\n            </section>\n          </main>\n\n          <ul>\n            {outdated_fund_data[selected_fund_ID]\n              ? Object.keys(outdated_fund_data).map((fundID) => {\n                  if (fundID === selected_fund_ID) {\n                    return Object.keys(outdated_fund_data[fundID].series).map(\n                      (seriesID, index) => {\n                        return (\n                          <div className=\"series\">\n                            <li className=\"seriesID\" key={index}>\n                              Series: {seriesID} - NAV:\n                            </li>\n                            <NumberFormat\n                              className=\"nav_input\"\n                              thousandSeparator={true}\n                              prefix={\"$\"}\n                              displayType=\"number\"\n                              name={`${fundID}_${seriesID}`}\n                              value={this.state[`${fundID}_${seriesID}`]}\n                              onChange={(e) => {\n                                this.handleNAVChange(\n                                  e,\n                                  seriesID,\n                                  selected_fund_ID\n                                );\n                              }}\n                            />\n                            <li className=\"outdated_NAV\">\n                              {\" \"}\n                              $\n                              {outdated_fund_data[fundID]\n                                ? outdated_fund_data[fundID].series[seriesID]\n                                : null}\n                            </li>\n                          </div>\n                        );\n                      }\n                    );\n                  }\n                })\n              : null}\n          </ul>\n\n          <div className=\"btn\">\n            <button type=\"submit\" id=\"submit\">\n              submit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"26","replacedBy":"30"},{"ruleId":"28","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":37,"column":36,"nodeType":"34","messageId":"35","endLine":37,"endColumn":37,"suggestions":"36"},{"ruleId":"32","severity":1,"message":"33","line":50,"column":36,"nodeType":"34","messageId":"35","endLine":50,"endColumn":37,"suggestions":"37"},{"ruleId":"38","severity":1,"message":"39","line":64,"column":76,"nodeType":"40","messageId":"41","endLine":64,"endColumn":78},{"ruleId":"42","severity":1,"message":"43","line":207,"column":66,"nodeType":"44","messageId":"45","endLine":207,"endColumn":68},{"ruleId":"42","severity":1,"message":"43","line":254,"column":62,"nodeType":"44","messageId":"45","endLine":254,"endColumn":64},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],["46"],["47"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["48","49"],["50","51"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"messageId":"52","fix":"53","desc":"54"},{"messageId":"55","fix":"56","desc":"57"},{"messageId":"52","fix":"58","desc":"54"},{"messageId":"55","fix":"59","desc":"57"},"removeEscape",{"range":"60","text":"61"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"62","text":"63"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"64","text":"61"},{"range":"65","text":"63"},[1013,1014],"",[1013,1013],"\\",[1372,1373],[1372,1372]]